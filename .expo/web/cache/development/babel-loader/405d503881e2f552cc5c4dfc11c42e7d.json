{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kay\\\\Code\\\\expo-three-beginner-setup\\\\App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { View as GraphicsView } from \"expo-graphics\";\nimport ExpoTHREE from \"expo-three\";\nimport * as THREE from \"three\";\nexport default function App() {\n  var renderer;\n  var cube;\n  var camera;\n  var scene;\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: {\n      flex: 1,\n      overflow: \"hidden\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, React.createElement(GraphicsView, {\n    style: styles.container,\n    onContextCreate: function _callee(_ref) {\n      var gl, width, height, pixelRatio, geometry, material, light;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              gl = _ref.gl, width = _ref.width, height = _ref.height, pixelRatio = _ref.scale;\n              renderer = new ExpoTHREE.Renderer({\n                gl: gl,\n                pixelRatio: pixelRatio,\n                width: width,\n                height: height\n              });\n              scene = new THREE.Scene();\n              camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n              camera.position.z = 5;\n              geometry = new THREE.BoxBufferGeometry(1, 2, 1);\n              material = new THREE.MeshPhongMaterial({\n                color: 0xff0000\n              });\n              cube = new THREE.Mesh(geometry, material);\n              cube.position.x = 0;\n              scene.add(cube);\n              scene.add(new THREE.AmbientLight(0x404040));\n              light = new THREE.DirectionalLight(0xffffff, 0.5);\n              light.position.set(3, 3, 3);\n              scene.add(light);\n              renderer.render(scene, camera);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    onResize: function onResize(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height,\n          scale = _ref2.scale;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setPixelRatio(scale);\n      renderer.setSize(width, height);\n    },\n    onRender: function onRender(delta) {\n      cube.rotation.z += 4 * delta;\n      cube.rotation.y += 1 * delta;\n      renderer.render(scene, camera);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"stretch\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Kay/Code/expo-three-beginner-setup/App.tsx"],"names":["React","View","GraphicsView","ExpoTHREE","THREE","App","renderer","cube","camera","scene","flex","overflow","width","height","styles","container","gl","pixelRatio","scale","Renderer","Scene","PerspectiveCamera","position","z","geometry","BoxBufferGeometry","material","MeshPhongMaterial","color","Mesh","x","add","AmbientLight","light","DirectionalLight","set","render","aspect","updateProjectionMatrix","setPixelRatio","setSize","delta","rotation","y","StyleSheet","create","alignItems"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,eAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAIC,QAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;AAEA,SACE,0CACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,QAAQ,EAAE,QAFL;AAGLC,MAAAA,KAAK,EAAE,MAHF;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEC,MAAM,CAACC,SADhB;AAEE,IAAA,eAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,EADe,QACfA,EADe,EAEfJ,KAFe,QAEfA,KAFe,EAGfC,MAHe,QAGfA,MAHe,EAIRI,UAJQ,QAIfC,KAJe;AAYfZ,cAAAA,QAAQ,GAAG,IAAIH,SAAS,CAACgB,QAAd,CAAuB;AAChCH,gBAAAA,EAAE,EAAFA,EADgC;AAEhCC,gBAAAA,UAAU,EAAVA,UAFgC;AAGhCL,gBAAAA,KAAK,EAALA,KAHgC;AAIhCC,gBAAAA,MAAM,EAANA;AAJgC,eAAvB,CAAX;AAMAJ,cAAAA,KAAK,GAAG,IAAIL,KAAK,CAACgB,KAAV,EAAR;AACAZ,cAAAA,MAAM,GAAG,IAAIJ,KAAK,CAACiB,iBAAV,CAA4B,EAA5B,EAAgCT,KAAK,GAAGC,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAT;AACAL,cAAAA,MAAM,CAACc,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AAEMC,cAAAA,QAtBS,GAsBE,IAAIpB,KAAK,CAACqB,iBAAV,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAtBF;AAuBTC,cAAAA,QAvBS,GAuBE,IAAItB,KAAK,CAACuB,iBAAV,CAA4B;AAC3CC,gBAAAA,KAAK,EAAE;AADoC,eAA5B,CAvBF;AA2BfrB,cAAAA,IAAI,GAAG,IAAIH,KAAK,CAACyB,IAAV,CAAeL,QAAf,EAAyBE,QAAzB,CAAP;AACAnB,cAAAA,IAAI,CAACe,QAAL,CAAcQ,CAAd,GAAkB,CAAlB;AACArB,cAAAA,KAAK,CAACsB,GAAN,CAAUxB,IAAV;AAEAE,cAAAA,KAAK,CAACsB,GAAN,CAAU,IAAI3B,KAAK,CAAC4B,YAAV,CAAuB,QAAvB,CAAV;AAEMC,cAAAA,KAjCS,GAiCD,IAAI7B,KAAK,CAAC8B,gBAAV,CAA2B,QAA3B,EAAqC,GAArC,CAjCC;AAkCfD,cAAAA,KAAK,CAACX,QAAN,CAAea,GAAf,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA1B,cAAAA,KAAK,CAACsB,GAAN,CAAUE,KAAV;AACA3B,cAAAA,QAAQ,CAAC8B,MAAT,CAAgB3B,KAAhB,EAAuBD,MAAvB;;AApCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFnB;AAwCE,IAAA,QAAQ,EAAE,yBAQJ;AAAA,UAPJI,KAOI,SAPJA,KAOI;AAAA,UANJC,MAMI,SANJA,MAMI;AAAA,UALJK,KAKI,SALJA,KAKI;AACJV,MAAAA,MAAM,CAAC6B,MAAP,GAAgBzB,KAAK,GAAGC,MAAxB;AACAL,MAAAA,MAAM,CAAC8B,sBAAP;AACAhC,MAAAA,QAAQ,CAACiC,aAAT,CAAuBrB,KAAvB;AACAZ,MAAAA,QAAQ,CAACkC,OAAT,CAAiB5B,KAAjB,EAAwBC,MAAxB;AACD,KArDH;AAsDE,IAAA,QAAQ,EAAE,kBAAC4B,KAAD,EAAmB;AAC3BlC,MAAAA,IAAI,CAACmC,QAAL,CAAcnB,CAAd,IAAmB,IAAIkB,KAAvB;AACAlC,MAAAA,IAAI,CAACmC,QAAL,CAAcC,CAAd,IAAmB,IAAIF,KAAvB;AAEAnC,MAAAA,QAAQ,CAAC8B,MAAT,CAAgB3B,KAAhB,EAAuBD,MAAvB;AACD,KA3DH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CADF;AA0ED;AAED,IAAMM,MAAM,GAAG8B,UAAU,CAACC,MAAX,CAAkB;AAC/B9B,EAAAA,SAAS,EAAE;AACTL,IAAAA,IAAI,EAAE,CADG;AAEToC,IAAAA,UAAU,EAAE,SAFH;AAGTlC,IAAAA,KAAK,EAAE,MAHE;AAITC,IAAAA,MAAM,EAAE;AAJC;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\n// @ts-ignore\r\nimport { View as GraphicsView } from \"expo-graphics\";\r\nimport ExpoTHREE from \"expo-three\";\r\nimport * as THREE from \"three\";\r\nimport { ExpoWebGLRenderingContext } from \"expo-gl\";\r\n\r\nexport default function App() {\r\n  let renderer: ExpoTHREE.Renderer;\r\n  let cube: THREE.Mesh;\r\n  let camera: THREE.PerspectiveCamera;\r\n  let scene: THREE.Scene;\r\n\r\n  return (\r\n    <>\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          overflow: \"hidden\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <GraphicsView\r\n          style={styles.container}\r\n          onContextCreate={async ({\r\n            gl,\r\n            width,\r\n            height,\r\n            scale: pixelRatio,\r\n          }: {\r\n            gl: ExpoWebGLRenderingContext;\r\n            canvas: any;\r\n            width: number;\r\n            height: number;\r\n            scale: any;\r\n          }) => {\r\n            renderer = new ExpoTHREE.Renderer({\r\n              gl,\r\n              pixelRatio,\r\n              width,\r\n              height,\r\n            });\r\n            scene = new THREE.Scene();\r\n            camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n            camera.position.z = 5;\r\n\r\n            const geometry = new THREE.BoxBufferGeometry(1, 2, 1);\r\n            const material = new THREE.MeshPhongMaterial({\r\n              color: 0xff0000,\r\n            });\r\n\r\n            cube = new THREE.Mesh(geometry, material);\r\n            cube.position.x = 0;\r\n            scene.add(cube);\r\n\r\n            scene.add(new THREE.AmbientLight(0x404040));\r\n\r\n            const light = new THREE.DirectionalLight(0xffffff, 0.5);\r\n            light.position.set(3, 3, 3);\r\n            scene.add(light);\r\n            renderer.render(scene, camera);\r\n          }}\r\n          onResize={({\r\n            width,\r\n            height,\r\n            scale,\r\n          }: {\r\n            width: any;\r\n            height: any;\r\n            scale: any;\r\n          }) => {\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setPixelRatio(scale);\r\n            renderer.setSize(width, height);\r\n          }}\r\n          onRender={(delta: number) => {\r\n            cube.rotation.z += 4 * delta;\r\n            cube.rotation.y += 1 * delta;\r\n\r\n            renderer.render(scene, camera);\r\n          }}\r\n        />\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"stretch\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}